# Sets a $real_scheme variable whose value is the scheme passed by the load
# balancer in X-Forwarded-Proto (if any), defaulting to $scheme.
# Similar to how the HttpRealIp module treats X-Forwarded-For.
map $http_x_forwarded_proto $real_scheme {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

server {
{% if https_enabled and _ssl_certs_available %}
    listen 443 {{ 'default_server' if default_server else '' }} ssl;
    listen [::]:443 {{ 'default_server' if default_server else '' }} ssl; ## listen for ipv6
{% endif %}

{% if http_enabled %}
    listen 80 {{ 'default_server' if default_server else '' }};
    listen [::]:80 {{ 'default_server' if default_server else '' }};
{% endif %}

    server_name {{ vhost_names | join(' ') }};
    charset {{ vhost_charset }};
    root {{ vhost_docroot }};
    index {{ vhost_index }};

{% if https_enabled and ssl_certs_flavor == 'letsencrypt' %}
    # Provide a route to letsencrypt challenge responses
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root {{ letsencrypt_sandbox_dir }};
    }
    location = /.well-known/acme-challenge/ {
        return 404;
    }
{% endif %}

  set $is_dedicated_health_check "";
{% if vhost_dedicated_health_check_path is defined and vhost_dedicated_health_check_path %}
  if ($request_uri = "{{ vhost_dedicated_health_check_path }}") {
    set $is_dedicated_health_check "true";
  }
{% endif %}

{% if https_enabled and _ssl_certs_available %}
    include inc_ssl_practices.conf;

    ssl_certificate {{ _server_cert_file }};
    ssl_certificate_key {{ _server_key_file }};
{% endif %}

{# Perform forced redirection only if https not enabled (i.e. handled in LB) #}
{# or if the certificates for performing the redirects are already available #}
{% if https_force_redirect and (not https_enabled or _ssl_certs_available) %}
    # Redirect http requests to the equivalent https URL
    set $https_redir_cond "";
    # this is just an elaborated AND boolean workaround (missing in nginx)
    # if the request is not a dedicated health check and scheme not https, trigger redirect
    if ($is_dedicated_health_check = "") {
      set $https_redir_cond "A";
    }
    if ($real_scheme != "https") {
      set $https_redir_cond "${https_redir_cond}B";
    }

    if ($https_redir_cond = "AB") {
      rewrite ^ https://$host$uri permanent;
    }
{% endif %}


    # ---  begin app specific configuration ---

    {{ vhost_app_config | default('') }}
}
